create type "public"."object_type" as enum ('site', 'area', 'container', 'item');

create table "public"."objects" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text default ''::text,
    "description" text default ''::text,
    "current_location_id" bigint,
    "assigned_location_id" bigint,
    "type" object_type default 'item'::object_type
);


alter table "public"."objects" enable row level security;

CREATE UNIQUE INDEX objects_pkey ON public.objects USING btree (id);

alter table "public"."objects" add constraint "objects_pkey" PRIMARY KEY using index "objects_pkey";

alter table "public"."objects" add constraint "objects_assigned_location_id_fkey" FOREIGN KEY (assigned_location_id) REFERENCES objects(id) ON DELETE SET NULL not valid;

alter table "public"."objects" validate constraint "objects_assigned_location_id_fkey";

alter table "public"."objects" add constraint "objects_current_location_id_fkey" FOREIGN KEY (current_location_id) REFERENCES objects(id) ON DELETE SET NULL not valid;

alter table "public"."objects" validate constraint "objects_current_location_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.assigned_location(start_id bigint)
 RETURNS bigint[]
 LANGUAGE plpgsql
 STABLE
AS $function$
DECLARE
  result bigint[] := ARRAY[]::bigint[];
  cur_id bigint := start_id;
  visited bigint[] := ARRAY[]::bigint[];
  len int;
BEGIN
  IF cur_id IS NULL THEN
    RETURN result;
  END IF;

  LOOP
    IF cur_id = ANY(visited) THEN
      EXIT;
    END IF;
    visited := array_append(visited, cur_id);

    IF NOT EXISTS (SELECT 1 FROM public.objects WHERE id = cur_id) THEN
      EXIT;
    END IF;

    result := array_append(result, cur_id);

    SELECT assigned_location_id::bigint INTO cur_id
    FROM public.objects
    WHERE id = visited[array_length(visited, 1)];

    IF cur_id IS NULL THEN
      EXIT;
    END IF;
  END LOOP;

  len := array_length(result, 1);
  IF len IS NULL THEN
    RETURN result;
  END IF;

  RETURN (
    SELECT array_agg(elem) FROM (
      SELECT result[i]::bigint AS elem
      FROM generate_subscripts(result, 1) AS s(i)
      ORDER BY (len - i)
    ) t
  );
END;
$function$
;

CREATE OR REPLACE FUNCTION public.current_location(start_id bigint)
 RETURNS bigint[]
 LANGUAGE plpgsql
 STABLE
AS $function$
DECLARE
  result bigint[] := ARRAY[]::bigint[];
  cur_id bigint := start_id;
  visited bigint[] := ARRAY[]::bigint[];
  len int;
BEGIN
  IF cur_id IS NULL THEN
    RETURN result;
  END IF;

  LOOP
    -- stop on cycle
    IF cur_id = ANY(visited) THEN
      EXIT;
    END IF;
    visited := array_append(visited, cur_id);

    -- ensure node exists
    IF NOT EXISTS (SELECT 1 FROM public.objects WHERE id = cur_id) THEN
      EXIT;
    END IF;

    -- append current node (target -> root)
    result := array_append(result, cur_id);

    -- move to parent
    SELECT current_location_id::bigint INTO cur_id
    FROM public.objects
    WHERE id = visited[array_length(visited, 1)];

    IF cur_id IS NULL THEN
      EXIT;
    END IF;
  END LOOP;

  len := array_length(result, 1);
  IF len IS NULL THEN
    RETURN result;
  END IF;

  -- Reverse result to root -> target
  RETURN (
    SELECT array_agg(elem) FROM (
      SELECT result[i]::bigint AS elem
      FROM generate_subscripts(result, 1) AS s(i)
      ORDER BY (len - i)  -- largest i (target) becomes last, smallest i (root) first
    ) t
  );
END;
$function$
;

CREATE OR REPLACE FUNCTION public.join_assigned_location(start_id bigint, separator text DEFAULT ' > '::text)
 RETURNS text
 LANGUAGE plpgsql
 STABLE
AS $function$
DECLARE
  ids bigint[];
BEGIN
  ids := public.assigned_location(start_id);
  IF ids IS NULL OR array_length(ids,1) IS NULL THEN
    RETURN NULL;
  END IF;

  RETURN (
    SELECT string_agg(o.name, separator ORDER BY ord)
    FROM (
      SELECT generate_subscripts(ids,1) AS ord, ids[generate_subscripts(ids,1)] AS id
    ) s
    JOIN public.objects o USING (id)
  );
END;
$function$
;

CREATE OR REPLACE FUNCTION public.join_current_location(start_id bigint, separator text DEFAULT ' > '::text)
 RETURNS text
 LANGUAGE plpgsql
 STABLE
AS $function$
DECLARE
  ids bigint[];
BEGIN
  ids := public.current_location(start_id);
  IF ids IS NULL OR array_length(ids,1) IS NULL THEN
    RETURN NULL;
  END IF;

  RETURN (
    SELECT string_agg(o.name, separator ORDER BY ord)
    FROM (
      SELECT generate_subscripts(ids,1) AS ord, ids[generate_subscripts(ids,1)] AS id
    ) s
    JOIN public.objects o USING (id)
  );
END;
$function$
;



